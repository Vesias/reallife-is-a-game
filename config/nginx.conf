# Nginx Configuration for Next.js Production\n# High-performance reverse proxy with security and caching\n\nuser nginx;\nworker_processes auto;\npid /run/nginx.pid;\nerror_log /var/log/nginx/error.log warn;\n\nevents {\n    worker_connections 1024;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic Settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n    \n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    \n    # Logging Format\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                   '$status $body_bytes_sent \"$http_referer\" '\n                   '\"$http_user_agent\" \"$http_x_forwarded_for\" '\n                   'rt=$request_time uct=\"$upstream_connect_time\" '\n                   'uht=\"$upstream_header_time\" urt=\"$upstream_response_time\"';\n    \n    access_log /var/log/nginx/access.log main;\n    \n    # Gzip Settings\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n    \n    # Rate Limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;\n    \n    # SSL Settings (if using HTTPS)\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    \n    # Security Headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n    \n    # Upstream Backend\n    upstream nextjs_backend {\n        server nextjs-app:3000;\n        keepalive 32;\n    }\n    \n    # Main Server Block\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name _;\n        \n        # Health check endpoint\n        location /health {\n            access_log off;\n            return 200 \"healthy\\n\";\n            add_header Content-Type text/plain;\n        }\n        \n        # Security.txt\n        location /.well-known/security.txt {\n            return 200 \"Contact: security@example.com\\nExpires: 2025-12-31T23:59:59.000Z\\nPreferred-Languages: en\\n\";\n            add_header Content-Type text/plain;\n        }\n        \n        # Static Assets with Long Cache\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {\n            proxy_pass http://nextjs_backend;\n            proxy_cache_valid 200 1y;\n            add_header Cache-Control \"public, immutable\";\n            expires 1y;\n        }\n        \n        # Next.js Static Files\n        location /_next/static/ {\n            proxy_pass http://nextjs_backend;\n            add_header Cache-Control \"public, immutable\";\n            expires 1y;\n        }\n        \n        # API Routes with Rate Limiting\n        location /api/ {\n            limit_req zone=api burst=20 nodelay;\n            \n            proxy_pass http://nextjs_backend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_cache_bypass $http_upgrade;\n            \n            # Timeout settings\n            proxy_connect_timeout 60s;\n            proxy_send_timeout 60s;\n            proxy_read_timeout 60s;\n        }\n        \n        # Auth Routes with Stricter Rate Limiting\n        location ~* /(login|signup|auth)/ {\n            limit_req zone=login burst=5 nodelay;\n            \n            proxy_pass http://nextjs_backend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_cache_bypass $http_upgrade;\n        }\n        \n        # All Other Routes\n        location / {\n            proxy_pass http://nextjs_backend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_cache_bypass $http_upgrade;\n            \n            # Cache HTML for short time\n            proxy_cache_valid 200 1m;\n        }\n        \n        # Block common attack vectors\n        location ~* \\.(env|git|svn|htaccess|htpasswd)$ {\n            deny all;\n            return 404;\n        }\n        \n        # Block bad bots\n        if ($http_user_agent ~* \"(Bytespider|YandexBot|AhrefsBot|SemrushBot)\") {\n            return 403;\n        }\n    }\n    \n    # HTTPS Server Block (uncomment if using SSL)\n    # server {\n    #     listen 443 ssl http2;\n    #     listen [::]:443 ssl http2;\n    #     server_name example.com www.example.com;\n    #     \n    #     ssl_certificate /etc/nginx/ssl/cert.pem;\n    #     ssl_certificate_key /etc/nginx/ssl/key.pem;\n    #     \n    #     # Include common configuration\n    #     include /etc/nginx/sites-available/common.conf;\n    # }\n    \n    # Redirect HTTP to HTTPS (uncomment if using SSL)\n    # server {\n    #     listen 80;\n    #     listen [::]:80;\n    #     server_name example.com www.example.com;\n    #     return 301 https://$server_name$request_uri;\n    # }\n}\n"
  